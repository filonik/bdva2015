PROJECT(demo)

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}")

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

IF(WIN32)
# TODO: Remove hard-coded paths
SET(ENV{GLEW_ROOT} "C:/Libraries/glew/glew-1.11.0")
SET(ENV{GLFW_ROOT} "C:/Libraries/glfw/glfw-3.1.bin.WIN32")
SET(ENV{GLM_ROOT} "C:/Libraries/glm/glm-0.9.5.4")
SET(ENV{MCPP_ROOT} "C:/Libraries/mcpp/mcpp-2.7.2")

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

FOREACH(CONFIG ${CMAKE_CONFIGURATION_TYPES} )
STRING(TOUPPER ${CONFIG} UPPER_CONFIG)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${UPPER_CONFIG} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${UPPER_CONFIG} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CONFIG})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${UPPER_CONFIG} ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/${CONFIG})
ENDFOREACH()
ENDIF(WIN32)

FIND_PACKAGE(GLEW REQUIRED)
FIND_PACKAGE(GLFW REQUIRED)
FIND_PACKAGE(GLM REQUIRED)
FIND_PACKAGE(mcpp REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)

INCLUDE_DIRECTORIES(
    src
    ${GLEW_INCLUDE_DIR}
    ${GLFW_INCLUDE_DIR}
    ${GLM_INCLUDE_DIR}
    ${MCPP_INCLUDE_DIR}
    ${OPENGL_INCLUDE_DIR}
)

LINK_DIRECTORIES(
    libs
)

SET(HEADER_FILES
    src/demo01.h
    src/demo02.h
    src/demo03.h
    src/glsl-program.h
    src/object.h
    src/scene.h
    src/scene-3ds.h
    src/vbo-cube.h
)

SET(SOURCE_FILES
    src/main.cpp
    src/glsl-program.cpp
    src/object.cpp
    src/scene.cpp
    src/scene-3ds.cpp
    src/vbo-cube.cpp
)

SOURCE_GROUP("Header Files" FILES ${HEADER_FILES})

SET(ALL_HEADER_FILES
    ${HEADER_FILES}
)

SET(ALL_SOURCE_FILES
    ${SOURCE_FILES}
)

IF(WIN32)

ADD_EXECUTABLE(${PROJECT_NAME} ${ALL_HEADER_FILES} ${ALL_SOURCE_FILES})

ELSEIF(APPLE)
# TODO: Add
ENDIF()

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    ${GLFW_LIBRARY}
    ${GLEW_LIBRARY}
    ${MCPP_LIBRARY}
    ${OPENGL_LIBRARIES}
)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_INSTALL_PREFIX}/bin)

INSTALL(TARGETS ${PROJECT_NAME}
    BUNDLE DESTINATION /Applications
    ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
)

MESSAGE(STATUS "Done.")